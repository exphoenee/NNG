class Auditorium{constructor(sectors){return this.sectors=[],this.seatNumber=0,sectors.forEach((sectorConf,sectorId)=>{const sector=new Sector({...sectorConf,sectorId:sectorId});this.seatNumber+=sector.seatNumber,this.sectors.push(sector)}),this}randomReservation(ammount=0){if(ammount<.2)console.error("The amount of reserved seat must be over 20% of the entire seats!");else{const allSeats=this.getAllSeats(),seatNr=allSeats.length;do{allSeats[Math.round(Math.random()*(seatNr-1))].setOccupied("Random")}while(auditorium.getOccupiedSeats().length<=Math.ceil(seatNr*ammount))}}optimize({min:min,max:max}){const occupied=this.getOccupiedSeats}getSeatNumber(){return this.seatNumber}getAllSeats(){return this.sectors.map(sector=>sector.getAllSeats()).flat(1)}getOccupiedSeats(){return this.sectors.map(sector=>sector.getOccupiedSeats()).flat(1)}getFreeSeats(){return this.sectors.map(sector=>sector.getFreeSeats()).flat(1)}render(parent="app"){const auditoriumElem=createDOMElem({tag:div,attrs:{class:"auditorium"},parent:parent});this.sectors.forEach(sector=>{sector.render(auditoriumElem)})}}
//# sourceMappingURL=Auditorium.min.js.map